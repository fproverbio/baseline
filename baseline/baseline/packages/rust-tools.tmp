
;; (define-module (baseline packages rust-tools)
;;   #:use-module (gnu packages)
;;   #:use-module (guix packages)
;;   #:use-module (gnu packages crates-gtk)
;;   #:use-module (gnu packages crates-io)
;;   #:use-module (guix build-system cargo)
;;   #:use-module (guix download)
;;   #:use-module ((guix licenses) #:prefix license:))

;; (define-public rust-ripgrep-all-0.9
;;   (package
;;     (name "rust-ripgrep-all")
;;     (version "0.9.6")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "ripgrep_all" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "1ppci77wdyxz21mn7qd3pphl3pcl2q9kf1ravc9a9zmv2r9n5gk1"))))
;;     (build-system cargo-build-system)
;;     (arguments
;;       `(#:cargo-inputs
;;         (("rust-bincode" ,rust-bincode-1)
;;          ("rust-bzip2" ,rust-bzip2-0.3)
;;          ("rust-cachedir" ,rust-cachedir-0.1)
;;          ("rust-chrono" ,rust-chrono-0.4)
;;          ("rust-clap" ,rust-clap-2)
;;          ("rust-crossbeam" ,rust-crossbeam-0.7)
;;          ("rust-encoding-rs" ,rust-encoding-rs-0.8)
;;          ("rust-encoding-rs-io" ,rust-encoding-rs-io-0.1)
;;          ("rust-env-logger" ,rust-env-logger-0.7)
;;          ("rust-exitfailure" ,rust-exitfailure-0.5)
;;          ("rust-failure" ,rust-failure-0.1)
;;          ("rust-flate2" ,rust-flate2-1)
;;          ("rust-glob" ,rust-glob-0.3)
;;          ("rust-lazy-static" ,rust-lazy-static-1)
;;          ("rust-log" ,rust-log-0.4)
;;          ("rust-paste" ,rust-paste-0.1)
;;          ("rust-path-clean" ,rust-path-clean-0.1)
;;          ("rust-regex" ,rust-regex-1)
;;          ("rust-rkv" ,rust-rkv-0.10)
;;          ("rust-rusqlite" ,rust-rusqlite-0.23)
;;          ("rust-serde" ,rust-serde-1)
;;          ("rust-serde-json" ,rust-serde-json-1)
;;          ("rust-size-format" ,rust-size-format-1)
;;          ("rust-structopt" ,rust-structopt-0.3)
;;          ("rust-tar" ,rust-tar-0.4)
;;          ("rust-tempfile" ,rust-tempfile-3)
;;          ("rust-tree-magic-fork" ,rust-tree-magic-fork-0.2)
;;          ("rust-xz2" ,rust-xz2-0.1)
;;          ("rust-zip" ,rust-zip-0.5)
;;          ("rust-zstd" ,rust-zstd-0.5))))
;;     (home-page "https://github.com/phiresky/ripgrep-all")
;;     (synopsis
;;       "rga: ripgrep, but also search in PDFs, E-Books, Office documents, zip, tar.gz, etc.")
;;     (description
;;       "rga: ripgrep, but also search in PDFs, E-Books, Office documents, zip, tar.gz,
;; etc.")
;;     (license license:agpl3+)))

;; (define-public rust-tree-magic-fork-0.2
;;   (package
;;     (name "rust-tree-magic-fork")
;;     (version "0.2.2")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "tree_magic_fork" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "1bqkd17ih1ixlarjw8p5h5q584j681vmwg1zkww873w2kg523fda"))))
;;     (build-system cargo-build-system)
;;     (arguments
;;       `(#:skip-build?
;;         #t
;;         #:cargo-inputs
;;         (("rust-clap" ,rust-clap-2)
;;          ("rust-fnv" ,rust-fnv-1)
;;          ("rust-lazy-static" ,rust-lazy-static-1)
;;          ("rust-nom" ,rust-nom-2)
;;          ("rust-num-cpus" ,rust-num-cpus-1)
;;          ("rust-parking-lot" ,rust-parking-lot-0.8)
;;          ("rust-petgraph" ,rust-petgraph-0.4)
;;          ("rust-scoped-threadpool" ,rust-scoped-threadpool-0.1)
;;          ("rust-tabwriter" ,rust-tabwriter-1)
;;          ("rust-walkdir" ,rust-walkdir-2))))
;;     (home-page "https://github.com/aahancoc/tree_magic/")
;;     (synopsis
;;       "Determines the MIME type of a file by traversing a filetype tree.")
;;     (description
;;       "Determines the MIME type of a file by traversing a filetype tree.")
;;     (license license:expat)))

;; (define-public rust-songrec-0.3
;;   (package
;;     (name "rust-songrec")
;;     (version "0.3.0")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "songrec" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "16hncprv55jc7w5qqhhwjagqgxdi5ailln7pdd180vc18jckj9zl"))))
;;     (build-system cargo-build-system)
;;     (arguments
;;       `(#:cargo-inputs
;;         (("rust-app-dirs" ,rust-app-dirs-2)
;;          ("rust-base64" ,rust-base64-0.12)
;;          ("rust-byteorder" ,rust-byteorder-1)
;;          ("rust-chfft" ,rust-chfft-0.3)
;;          ("rust-chrono" ,rust-chrono-0.4)
;;          ("rust-clap" ,rust-clap-2)
;;          ("rust-cpal" ,rust-cpal-0.13)
;;          ("rust-crc32fast" ,rust-crc32fast-1)
;;          ("rust-csv" ,rust-csv-1)
;;          ("rust-gag" ,rust-gag-0.1)
;;          ("rust-gdk" ,rust-gdk-0.13)
;;          ("rust-gdk-pixbuf" ,rust-gdk-pixbuf-0.9)
;;          ("rust-gettext-rs" ,rust-gettext-rs-0.5)
;;          ("rust-gettext-sys" ,rust-gettext-sys-0.19)
;;          ("rust-gio" ,rust-gio-0.9)
;;          ("rust-glib" ,rust-glib-0.10)
;;          ("rust-gtk" ,rust-gtk-0.15)
;;          ("rust-hound" ,rust-hound-3)
;;          ("rust-mpris-player" ,rust-mpris-player-0.6)
;;          ("rust-percent-encoding" ,rust-percent-encoding-2)
;;          ("rust-rand" ,rust-rand-0.7)
;;          ("rust-regex" ,rust-regex-1)
;;          ("rust-reqwest" ,rust-reqwest-0.10)
;;          ("rust-rodio" ,rust-rodio-0.15)
;;          ("rust-serde" ,rust-serde-1)
;;          ("rust-serde-json" ,rust-serde-json-1)
;;          ("rust-tempfile" ,rust-tempfile-3)
;;          ("rust-uuid" ,rust-uuid-0.8))))
;;     (home-page "https://github.com/marin-m/SongRec")
;;     (synopsis "An open-source Shazam client for Linux, written in Rust.")
;;     (description "An open-source Shazam client for Linux, written in Rust.")
;;     (license license:gpl3+)))

;; (define-public rust-app-dirs-2
;;   (package
;;     (name "rust-app-dirs")
;;     (version "2.0.1")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "app-dirs" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "0yziwhs1hv4zgzdzpbwlyfhhdmyp19gggsbd5nnm40cpzwmaq3by"))))
;;     (build-system cargo-build-system)
;;     (home-page "https://github.com/AndyBarron/app-dirs-rs")
;;     (synopsis
;;       "Put your app's data in the right place on every platform [DEPRECATED]")
;;     (description
;;       "Put your app's data in the right place on every platform [DEPRECATED]")
;;     (license license:expat)))

;; (define-public rust-chfft-0.3
;;   (package
;;     (name "rust-chfft")
;;     (version "0.3.4")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "chfft" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "1h3xj0wvc89a1pnqr2mc7gq86p7madlwfkgjvcn7zgrjwl4y0fqh"))))
;;     (build-system cargo-build-system)
;;     (arguments
;;       `(#:cargo-inputs
;;         (("rust-num-complex" ,rust-num-complex-0.4)
;;          ("rust-num-traits" ,rust-num-traits-0.2))
;;         #:cargo-development-inputs
;;         (("rust-appro-eq" ,rust-appro-eq-0.3)
;;          ("rust-rand" ,rust-rand-0.8)
;;          ("rust-rand-xorshift" ,rust-rand-xorshift-0.3))))
;;     (home-page "https://github.com/chalharu/chfft")
;;     (synopsis "Fastest Fourier Transform library implemented with pure Rust.")
;;     (description
;;       "Fastest Fourier Transform library implemented with pure Rust.")
;;     (license license:mpl2.0)))

;; (define-public rust-cpal-0.13
;;   (package
;;     (name "rust-cpal")
;;     (version "0.13.5")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "cpal" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "05j11vz8rw19gqqvpd48i7wvm6j77v8fwx5lwhlkckqjllv7h4bl"))))
;;     (build-system cargo-build-system)
;;     (arguments
;;       `(#:cargo-inputs
;;         (("rust-alsa" ,rust-alsa-0.6)
;;          ("rust-asio-sys" ,rust-asio-sys-0.2)
;;          ("rust-core-foundation-sys" ,rust-core-foundation-sys-0.8)
;;          ("rust-coreaudio-rs" ,rust-coreaudio-rs-0.11)
;;          ("rust-jack" ,rust-jack-0.9)
;;          ("rust-jni" ,rust-jni-0.19)
;;          ("rust-js-sys" ,rust-js-sys-0.3)
;;          ("rust-lazy-static" ,rust-lazy-static-1)
;;          ("rust-libc" ,rust-libc-0.2)
;;          ("rust-mach" ,rust-mach-0.3)
;;          ("rust-ndk" ,rust-ndk-0.6)
;;          ("rust-ndk-glue" ,rust-ndk-glue-0.6)
;;          ("rust-nix" ,rust-nix-0.23)
;;          ("rust-num-traits" ,rust-num-traits-0.2)
;;          ("rust-oboe" ,rust-oboe-0.4)
;;          ("rust-parking-lot" ,rust-parking-lot-0.11)
;;          ("rust-stdweb" ,rust-stdweb-0.4)
;;          ("rust-thiserror" ,rust-thiserror-1)
;;          ("rust-wasm-bindgen" ,rust-wasm-bindgen-0.2)
;;          ("rust-web-sys" ,rust-web-sys-0.3)
;;          ("rust-winapi" ,rust-winapi-0.3))
;;         #:cargo-development-inputs
;;         (("rust-anyhow" ,rust-anyhow-1)
;;          ("rust-clap" ,rust-clap-3)
;;          ("rust-hound" ,rust-hound-3)
;;          ("rust-ringbuf" ,rust-ringbuf-0.2))))
;;     (home-page "https://github.com/rustaudio/cpal")
;;     (synopsis "Low-level cross-platform audio I/O library in pure Rust.")
;;     (description "Low-level cross-platform audio I/O library in pure Rust.")
;;     (license license:asl2.0)))

;; (define-public rust-gtk-0.15
;;   (package
;;     (name "rust-gtk")
;;     (version "0.15.3")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "gtk" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "0pk7jj85klr5fyzmdgy0mqwyvwkj2fi2j7c0gja67sjvq2p8x5y7"))))
;;     (build-system cargo-build-system)
;;     (arguments
;;       `(#:cargo-inputs
;;         (("rust-atk" ,rust-atk-0.15)
;;          ("rust-bitflags" ,rust-bitflags-1)
;;          ("rust-cairo-rs" ,rust-cairo-rs-0.15)
;;          ("rust-field-offset" ,rust-field-offset-0.3)
;;          ("rust-futures-channel" ,rust-futures-channel-0.3)
;;          ("rust-gdk" ,rust-gdk-0.15)
;;          ("rust-gdk-pixbuf" ,rust-gdk-pixbuf-0.15)
;;          ("rust-gio" ,rust-gio-0.15)
;;          ("rust-glib" ,rust-glib-0.15)
;;          ("rust-gtk-sys" ,rust-gtk-sys-0.15)
;;          ("rust-gtk3-macros" ,rust-gtk3-macros-0.15)
;;          ("rust-libc" ,rust-libc-0.2)
;;          ("rust-once-cell" ,rust-once-cell-1)
;;          ("rust-pango" ,rust-pango-0.15)
;;          ("rust-pkg-config" ,rust-pkg-config-0.3))
;;         #:cargo-development-inputs
;;         (("rust-gir-format-check" ,rust-gir-format-check-0.1))))
;;     (home-page "https://gtk-rs.org/")
;;     (synopsis "Rust bindings for the GTK+ 3 library")
;;     (description "Rust bindings for the GTK+ 3 library")
;;     (license license:expat)))

;; (define-public rust-hound-3
;;   (package
;;     (name "rust-hound")
;;     (version "3.4.0")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "hound" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "0jbm25p2nc8758dnfjan1yk7hz2i85y89nrbai14zzxfrsr4n5la"))))
;;     (build-system cargo-build-system)
;;     (arguments `(#:cargo-development-inputs (("rust-cpal" ,rust-cpal-0.2))))
;;     (home-page "https://github.com/ruuda/hound")
;;     (synopsis "A wav encoding and decoding library")
;;     (description "This package provides a wav encoding and decoding library")
;;     (license license:asl2.0)))

;; (define-public rust-rodio-0.15
;;   (package
;;     (name "rust-rodio")
;;     (version "0.15.0")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "rodio" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "07kkrx0hxfcqgkpg0lrh9355bj1rl0k65nwsk3qwdri6yvlkj2gc"))))
;;     (build-system cargo-build-system)
;;     (arguments
;;       `(#:cargo-inputs
;;         (("rust-claxon" ,rust-claxon-0.4)
;;          ("rust-cpal" ,rust-cpal-0.13)
;;          ("rust-hound" ,rust-hound-3)
;;          ("rust-lewton" ,rust-lewton-0.10)
;;          ("rust-minimp3" ,rust-minimp3-0.5)
;;          ("rust-symphonia" ,rust-symphonia-0.4))
;;         #:cargo-development-inputs
;;         (("rust-quickcheck" ,rust-quickcheck-0.9))))
;;     (home-page "https://github.com/RustAudio/rodio")
;;     (synopsis "Audio playback library")
;;     (description "Audio playback library")
;;     (license (list license:expat license:asl2.0))))

;; (define-public rust-appro-eq-0.3
;;   (package
;;     (name "rust-appro-eq")
;;     (version "0.3.1")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "appro-eq" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "1i9hbrcwddp0l4vafbbk6cfh0xfpgicg9wl4cxlhvgb6z7jwzn87"))))
;;     (build-system cargo-build-system)
;;     (arguments
;;       `(#:cargo-inputs
;;         (("rust-ndarray" ,rust-ndarray-0.15)
;;          ("rust-num-complex" ,rust-num-complex-0.4)
;;          ("rust-num-integer" ,rust-num-integer-0.1)
;;          ("rust-num-rational" ,rust-num-rational-0.4)
;;          ("rust-num-traits" ,rust-num-traits-0.2))))
;;     (home-page "https://github.com/chalharu/rust-appro-eq")
;;     (synopsis "Approximately equal traits and assertion")
;;     (description "Approximately equal traits and assertion")
;;     (license license:mpl2.0)))

;; (define-public rust-alsa-0.6
;;   (package
;;     (name "rust-alsa")
;;     (version "0.6.0")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "alsa" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "0szx8finhqbffh08fp3bgh4ywz0b572vcdyh4hwyhrfgw8pza5ar"))))
;;     (build-system cargo-build-system)
;;     (arguments
;;       `(#:cargo-inputs
;;         (("rust-alsa-sys" ,rust-alsa-sys-0.3)
;;          ("rust-bitflags" ,rust-bitflags-1)
;;          ("rust-libc" ,rust-libc-0.2)
;;          ("rust-nix" ,rust-nix-0.23))))
;;     (home-page "https://github.com/diwic/alsa-rs")
;;     (synopsis "Thin but safe wrappers for ALSA (Linux sound API)")
;;     (description "Thin but safe wrappers for ALSA (Linux sound API)")
;;     (license (list license:asl2.0 license:expat))))

;; (define-public rust-asio-sys-0.2
;;   (package
;;     (name "rust-asio-sys")
;;     (version "0.2.0")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "asio-sys" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "1m8v2jsa4n57s7a7142vs23dkz63dhjxgcjxykd17kvq66v9qqj7"))))
;;     (build-system cargo-build-system)
;;     (arguments
;;       `(#:cargo-inputs
;;         (("rust-bindgen" ,rust-bindgen-0.54)
;;          ("rust-cc" ,rust-cc-1)
;;          ("rust-lazy-static" ,rust-lazy-static-1)
;;          ("rust-num-derive" ,rust-num-derive-0.3)
;;          ("rust-num-traits" ,rust-num-traits-0.2)
;;          ("rust-walkdir" ,rust-walkdir-2))))
;;     (home-page "https://github.com/RustAudio/cpal/")
;;     (synopsis
;;       "Low-level interface and binding generation for the steinberg ASIO SDK.")
;;     (description
;;       "Low-level interface and binding generation for the steinberg ASIO SDK.")
;;     (license license:asl2.0)))

;; (define-public rust-coreaudio-rs-0.11
;;   (package
;;     (name "rust-coreaudio-rs")
;;     (version "0.11.1")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "coreaudio-rs" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "0h24qz1a99z2w7ya158cbnrw193jbk5wsw1isp17qnak2pj1jdsx"))))
;;     (build-system cargo-build-system)
;;     (arguments
;;       `(#:cargo-inputs
;;         (("rust-bitflags" ,rust-bitflags-1)
;;          ("rust-core-foundation-sys" ,rust-core-foundation-sys-0.6)
;;          ("rust-coreaudio-sys" ,rust-coreaudio-sys-0.2))))
;;     (home-page "https://github.com/RustAudio/coreaudio-rs")
;;     (synopsis "A friendly rust interface for Apple's CoreAudio API.")
;;     (description
;;       "This package provides a friendly rust interface for Apple's CoreAudio API.")
;;     (license (list license:expat license:asl2.0))))

;; (define-public rust-jack-0.9
;;   (package
;;     (name "rust-jack")
;;     (version "0.9.0")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "jack" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "0ghsqkraxlarlq7xyxsrr26hxl48pifmcrydpipff5xr2mkbga81"))))
;;     (build-system cargo-build-system)
;;     (arguments
;;       `(#:cargo-inputs
;;         (("rust-bitflags" ,rust-bitflags-1)
;;          ("rust-dlib" ,rust-dlib-0.5)
;;          ("rust-jack-sys" ,rust-jack-sys-0.3)
;;          ("rust-lazy-static" ,rust-lazy-static-1)
;;          ("rust-libc" ,rust-libc-0.2)
;;          ("rust-log" ,rust-log-0.4))
;;         #:cargo-development-inputs
;;         (("rust-crossbeam-channel" ,rust-crossbeam-channel-0.5))))
;;     (home-page "https://github.com/RustAudio/rust-jack")
;;     (synopsis "Real time audio and midi with JACK.")
;;     (description "Real time audio and midi with JACK.")
;;     (license license:expat)))

;; (define-public rust-jni-0.19
;;   (package
;;     (name "rust-jni")
;;     (version "0.19.0")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "jni" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "1v0pn0i1wb8zp4wns4l8hz9689hqsplv7iba7hylaznvwg11ipy6"))))
;;     (build-system cargo-build-system)
;;     (arguments
;;       `(#:cargo-inputs
;;         (("rust-cesu8" ,rust-cesu8-1)
;;          ("rust-combine" ,rust-combine-4)
;;          ("rust-jni-sys" ,rust-jni-sys-0.3)
;;          ("rust-log" ,rust-log-0.4)
;;          ("rust-thiserror" ,rust-thiserror-1)
;;          ("rust-walkdir" ,rust-walkdir-2))
;;         #:cargo-development-inputs
;;         (("rust-lazy-static" ,rust-lazy-static-1))))
;;     (home-page "https://github.com/jni-rs/jni-rs")
;;     (synopsis "Rust bindings to the JNI")
;;     (description "Rust bindings to the JNI")
;;     (license (list license:expat license:asl2.0))))

;; (define-public rust-ndk-0.6
;;   (package
;;     (name "rust-ndk")
;;     (version "0.6.0")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "ndk" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "1m1dfjw35qpys1hr4qib6mm3zacd01k439l7cx5f7phd0dzcfci0"))))
;;     (build-system cargo-build-system)
;;     (arguments
;;       `(#:cargo-inputs
;;         (("rust-bitflags" ,rust-bitflags-1)
;;          ("rust-jni" ,rust-jni-0.18)
;;          ("rust-jni-glue" ,rust-jni-glue-0.0.10)
;;          ("rust-jni-sys" ,rust-jni-sys-0.3)
;;          ("rust-ndk-sys" ,rust-ndk-sys-0.3)
;;          ("rust-num-enum" ,rust-num-enum-0.5)
;;          ("rust-thiserror" ,rust-thiserror-1))))
;;     (home-page "https://github.com/rust-windowing/android-ndk-rs")
;;     (synopsis "Safe Rust bindings to the Android NDK")
;;     (description "Safe Rust bindings to the Android NDK")
;;     (license (list license:expat license:asl2.0))))

;; (define-public rust-ndk-glue-0.6
;;   (package
;;     (name "rust-ndk-glue")
;;     (version "0.6.0")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "ndk-glue" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "0yaxwp953c0b5fpn8zalwjkrvw8rkf00physlmi9kssq115x3h04"))))
;;     (build-system cargo-build-system)
;;     (arguments
;;       `(#:cargo-inputs
;;         (("rust-android-logger" ,rust-android-logger-0.10)
;;          ("rust-lazy-static" ,rust-lazy-static-1)
;;          ("rust-libc" ,rust-libc-0.2)
;;          ("rust-log" ,rust-log-0.4)
;;          ("rust-ndk" ,rust-ndk-0.6)
;;          ("rust-ndk-macro" ,rust-ndk-macro-0.3)
;;          ("rust-ndk-sys" ,rust-ndk-sys-0.3))))
;;     (home-page "https://github.com/rust-windowing/android-ndk-rs")
;;     (synopsis "Startup code for android binaries")
;;     (description "Startup code for android binaries")
;;     (license (list license:expat license:asl2.0))))


;; (define-public rust-oboe-0.4
;;   (package
;;     (name "rust-oboe")
;;     (version "0.4.5")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "oboe" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "1lh20l8b4lx5h9a7lpf9n66z47sh2508w7x2203hsklvw7rchqr4"))))
;;     (build-system cargo-build-system)
;;     (arguments
;;       `(#:cargo-inputs
;;         (("rust-jni" ,rust-jni-0.19)
;;          ("rust-ndk" ,rust-ndk-0.6)
;;          ("rust-ndk-glue" ,rust-ndk-glue-0.6)
;;          ("rust-num-derive" ,rust-num-derive-0.3)
;;          ("rust-num-traits" ,rust-num-traits-0.2)
;;          ("rust-oboe-sys" ,rust-oboe-sys-0.4))))
;;     (home-page "https://github.com/katyo/oboe-rs")
;;     (synopsis
;;       "Safe interface for oboe an android library for low latency audio IO")
;;     (description
;;       "Safe interface for oboe an android library for low latency audio IO")
;;     (license license:asl2.0)))

;; (define-public rust-ringbuf-0.2
;;   (package
;;     (name "rust-ringbuf")
;;     (version "0.2.6")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "ringbuf" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "1wxd2sb5b0kjwc5mcv8qrmzl0spfs0agznrxain3xhrr769g6q3c"))))
;;     (build-system cargo-build-system)
;;     (arguments `(#:cargo-inputs (("rust-cache-padded" ,rust-cache-padded-1))))
;;     (home-page "https://github.com/nthend/ringbuf")
;;     (synopsis
;;       "Lock-free SPSC FIFO ring buffer with direct access to inner data")
;;     (description
;;       "Lock-free SPSC FIFO ring buffer with direct access to inner data")
;;     (license (list license:expat license:asl2.0))))

;; (define-public rust-atk-0.15
;;   (package
;;     (name "rust-atk")
;;     (version "0.15.1")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "atk" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "1pfympjvlhvv4rzjvy8y1cvl9w5gq88nj3c3jsd91qphwrn82g9c"))))
;;     (build-system cargo-build-system)
;;     (arguments
;;       `(#:cargo-inputs
;;         (("rust-atk-sys" ,rust-atk-sys-0.15)
;;          ("rust-bitflags" ,rust-bitflags-1)
;;          ("rust-glib" ,rust-glib-0.15)
;;          ("rust-libc" ,rust-libc-0.2))
;;         #:cargo-development-inputs
;;         (("rust-gir-format-check" ,rust-gir-format-check-0.1))))
;;     (home-page "https://gtk-rs.org/")
;;     (synopsis "Rust bindings for the ATK library")
;;     (description "Rust bindings for the ATK library")
;;     (license license:expat)))

;; (define-public rust-cairo-rs-0.15
;;   (package
;;     (name "rust-cairo-rs")
;;     (version "0.15.1")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "cairo-rs" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "0jpiddqzanqh2j4ds8ds4bklf4a6ijp8w5wz5xv9c3qphxxfjsdq"))))
;;     (build-system cargo-build-system)
;;     (arguments
;;       `(#:cargo-inputs
;;         (("rust-bitflags" ,rust-bitflags-1)
;;          ("rust-cairo-sys-rs" ,rust-cairo-sys-rs-0.15)
;;          ("rust-freetype" ,rust-freetype-0.7)
;;          ("rust-glib" ,rust-glib-0.15)
;;          ("rust-libc" ,rust-libc-0.2)
;;          ("rust-thiserror" ,rust-thiserror-1))
;;         #:cargo-development-inputs
;;         (("rust-tempfile" ,rust-tempfile-3))))
;;     (home-page "https://gtk-rs.org/")
;;     (synopsis "Rust bindings for the Cairo library")
;;     (description "Rust bindings for the Cairo library")
;;     (license license:expat)))

;; (define-public rust-gdk-0.15
;;   (package
;;     (name "rust-gdk")
;;     (version "0.15.2")
;;     (source
;;       (origin
;;         (method url-fetch)
;;         (uri (crate-uri "gdk" version))
;;         (file-name (string-append name "-" version ".tar.gz"))
;;         (sha256
;;           (base32 "1mgqw0g9r81z7d6p47n5icwmpya77a7q78341rvxhpn33vl5hhk1"))))
;;     (build-system cargo-build-system)
;;     (arguments
;;       `(#:cargo-inputs
;;         (("rust-bitflags" ,rust-bitflags-1)
;;          ("rust-cairo-rs" ,rust-cairo-rs-0.15)
;;          ("rust-gdk-pixbuf" ,rust-gdk-pixbuf-0.15)
;;          ("rust-gdk-sys" ,rust-gdk-sys-0.15)
;;          ("rust-gio" ,rust-gio-0.15)
;;          ("rust-glib" ,rust-glib-0.15)
;;          ("rust-libc" ,rust-libc-0.2)
;;          ("rust-pango" ,rust-pango-0.15))
;;         #:cargo-development-inputs
;;         (("rust-gir-format-check" ,rust-gir-format-check-0.1))))
;;     (home-page "https://gtk-rs.org/")
;;     (synopsis "Rust bindings for the GDK 3 library")
;;     (description "Rust bindings for the GDK 3 library")
;;     (license license:expat)))
